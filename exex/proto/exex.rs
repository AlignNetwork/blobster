// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `exex.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:remote.SubscribeRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SubscribeRequest {
    // message fields
    // @@protoc_insertion_point(field:remote.SubscribeRequest.node_id)
    pub node_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:remote.SubscribeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscribeRequest {
    fn default() -> &'a SubscribeRequest {
        <SubscribeRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeRequest {
    pub fn new() -> SubscribeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_id",
            |m: &SubscribeRequest| { &m.node_id },
            |m: &mut SubscribeRequest| { &mut m.node_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscribeRequest>(
            "SubscribeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscribeRequest {
    const NAME: &'static str = "SubscribeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.node_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.node_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.node_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.node_id != 0 {
            os.write_uint32(1, self.node_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscribeRequest {
        SubscribeRequest::new()
    }

    fn clear(&mut self) {
        self.node_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscribeRequest {
        static instance: SubscribeRequest = SubscribeRequest {
            node_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscribeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscribeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscribeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:remote.BlobChunk)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BlobChunk {
    // message fields
    // @@protoc_insertion_point(field:remote.BlobChunk.node_id)
    pub node_id: u32,
    // @@protoc_insertion_point(field:remote.BlobChunk.chunk_index)
    pub chunk_index: u32,
    // @@protoc_insertion_point(field:remote.BlobChunk.chunk)
    pub chunk: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:remote.BlobChunk.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BlobChunk {
    fn default() -> &'a BlobChunk {
        <BlobChunk as ::protobuf::Message>::default_instance()
    }
}

impl BlobChunk {
    pub fn new() -> BlobChunk {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_id",
            |m: &BlobChunk| { &m.node_id },
            |m: &mut BlobChunk| { &mut m.node_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chunk_index",
            |m: &BlobChunk| { &m.chunk_index },
            |m: &mut BlobChunk| { &mut m.chunk_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chunk",
            |m: &BlobChunk| { &m.chunk },
            |m: &mut BlobChunk| { &mut m.chunk },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BlobChunk>(
            "BlobChunk",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BlobChunk {
    const NAME: &'static str = "BlobChunk";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.node_id = is.read_uint32()?;
                },
                16 => {
                    self.chunk_index = is.read_uint32()?;
                },
                26 => {
                    self.chunk = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.node_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.node_id);
        }
        if self.chunk_index != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.chunk_index);
        }
        if !self.chunk.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.chunk);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.node_id != 0 {
            os.write_uint32(1, self.node_id)?;
        }
        if self.chunk_index != 0 {
            os.write_uint32(2, self.chunk_index)?;
        }
        if !self.chunk.is_empty() {
            os.write_bytes(3, &self.chunk)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BlobChunk {
        BlobChunk::new()
    }

    fn clear(&mut self) {
        self.node_id = 0;
        self.chunk_index = 0;
        self.chunk.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BlobChunk {
        static instance: BlobChunk = BlobChunk {
            node_id: 0,
            chunk_index: 0,
            chunk: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BlobChunk {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BlobChunk").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BlobChunk {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlobChunk {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nexex.proto\x12\x06remote\"+\n\x10SubscribeRequest\x12\x17\n\x07node_\
    id\x18\x01\x20\x01(\rR\x06nodeId\"[\n\tBlobChunk\x12\x17\n\x07node_id\
    \x18\x01\x20\x01(\rR\x06nodeId\x12\x1f\n\x0bchunk_index\x18\x02\x20\x01(\
    \rR\nchunkIndex\x12\x14\n\x05chunk\x18\x03\x20\x01(\x0cR\x05chunk2J\n\nR\
    emoteExEx\x12<\n\tSubscribe\x12\x18.remote.SubscribeRequest\x1a\x11.remo\
    te.BlobChunk\"\00\x01J\x85\x03\n\x06\x12\x04\0\0\x10\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\n\n\x02\x06\0\x12\
    \x04\x04\0\x06\x01\n\n\n\x03\x06\0\x01\x12\x03\x04\x08\x12\n\x0b\n\x04\
    \x06\0\x02\0\x12\x03\x05\x02?\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x05\
    \x06\x0f\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x05\x10\x20\n\x0c\n\x05\x06\
    \0\x02\0\x06\x12\x03\x05+1\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x052;\n\n\
    \n\x02\x04\0\x12\x04\x08\0\n\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x18\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\t\x02\x15\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\t\x10\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\t\x13\x14\n\n\n\x02\x04\x01\x12\x04\x0c\0\
    \x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0c\x08\x11\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\r\x02\x15\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\r\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\r\t\x10\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\r\x13\x14\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0e\x02\x19\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x0e\t\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x0e\x17\x18\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0f\x02\x12\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x0f\x02\x07\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x0f\x08\r\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0f\x10\x11b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(SubscribeRequest::generated_message_descriptor_data());
            messages.push(BlobChunk::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
